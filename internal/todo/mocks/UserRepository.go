// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/manabie-com/togo/internal/todo/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// GetByCredentials provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserRepository) GetByCredentials(_a0 context.Context, _a1 string, _a2 string) (*domain.User, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) GetByID(_a0 context.Context, _a1 int) (*domain.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
