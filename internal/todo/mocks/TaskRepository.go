// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/manabie-com/togo/internal/todo/domain"
	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// CreateTaskForUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *TaskRepository) CreateTaskForUser(_a0 context.Context, _a1 int, _a2 domain.TaskCreateParam) (*domain.Task, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.TaskCreateParam) *domain.Task); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, domain.TaskCreateParam) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskCount provides a mock function with given fields: _a0, _a1, _a2
func (_m *TaskRepository) GetTaskCount(_a0 context.Context, _a1 int, _a2 string) (int, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int, string) int); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksForUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *TaskRepository) GetTasksForUser(_a0 context.Context, _a1 int, _a2 string) ([]*domain.Task, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []*domain.Task); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
